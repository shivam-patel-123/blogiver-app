AWSTemplateFormatVersion: "2010-09-09"
Parameters:
    Environment:
        Type: String
        Default: dev
        Description: The environment for which you want to create resources.
        AllowedValues:
            - dev
            - prod

Mappings:
    SecretsMap:
        dev:
            AppSecrets: <SECRETS_TO_STORE_IN_SECRETS_MANAGER>

        prod:
            AppSecrets: <SECRETS_TO_STORE_IN_SECRETS_MANAGER>

Resources:
    MyQueue:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: !Sub "MyQueue-${Environment}"

    BlogiverSecretManager:
        Type: "AWS::SecretsManager::Secret"
        Properties:
            Name: !Sub "BlogiverSecretManager-${Environment}"
            SecretString: !FindInMap [SecretsMap, !Ref Environment, AppSecrets]

    S3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "blogiver-bucket-b00917152"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: false
                BlockPublicPolicy: false
                IgnorePublicAcls: false
                RestrictPublicBuckets: false

    S3BucketPolicy:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Sid: "PublicReadGetObject"
                      Effect: Allow
                      Principal: "*"
                      Action: "s3:GetObject"
                      Resource: "arn:aws:s3:::blogiver-bucket-b00917152/*"

    SendEmailFnc:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ImageUri: "541670391863.dkr.ecr.us-east-1.amazonaws.com/blogiver:latest"
            Role: "arn:aws:iam::541670391863:role/LabRole"
            PackageType: Image
            Environment:
                Variables:
                    SECRET_NAME: "BlogiverSecretManager-dev"

    SendEmailFunctionEventSourceMapping:
        Type: "AWS::Lambda::EventSourceMapping"
        Properties:
            BatchSize: 10
            Enabled: true
            EventSourceArn: !GetAtt MyQueue.Arn
            FunctionName: !Ref SendEmailFnc

    BlogiverVPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: "192.168.0.0/24"
            Tags:
                - Key: Name
                  Value: BlogiverVPC

    PublicSubnet:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref BlogiverVPC
            CidrBlock: "192.168.0.0/25"
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: Public-1A

    PrivateSubnet:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref BlogiverVPC
            CidrBlock: "192.168.0.128/25"
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: Private-1A

    PrivateRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref BlogiverVPC
            Tags:
                - Key: Name
                  Value: Private-RT

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref BlogiverVPC
            Tags:
                - Key: Name
                  Value: MAIN

    PrivateSubnetRoute:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PrivateSubnet
            RouteTableId: !Ref PrivateRouteTable

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: Blogiver-IGW

    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            VpcId: !Ref BlogiverVPC
            InternetGatewayId: !Ref InternetGateway

    PublicSubnetRoute:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PublicSubnet
            RouteTableId: !Ref PublicRouteTable

    DefaultRoute:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: "0.0.0.0/0"
            GatewayId: !Ref InternetGateway

    ElasticIP:
        Type: AWS::EC2::EIP
        Properties:
            Domain: vpc

    NATGateway:
        Type: AWS::EC2::NatGateway
        Properties:
            SubnetId: !Ref PublicSubnet
            AllocationId: !GetAtt ElasticIP.AllocationId

    PrivateRoute:
        Type: AWS::EC2::Route
        DependsOn: NATGateway
        Properties:
            RouteTableId: !Ref PrivateRouteTable
            DestinationCidrBlock: "0.0.0.0/0"
            NatGatewayId: !Ref NATGateway

    MyApi:
        Type: "AWS::ApiGateway::RestApi"
        Properties:
            Name: API-Blogiver

    MyApiResource:
        Type: "AWS::ApiGateway::Resource"
        Properties:
            RestApiId:
                Ref: MyApi
            ParentId:
                Fn::GetAtt:
                    - MyApi
                    - RootResourceId
            PathPart: send-email

    MyApiMethod:
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId:
                Ref: MyApi
            ResourceId:
                Ref: MyApiResource
            HttpMethod: POST
            AuthorizationType: NONE
            Integration:
                Type: AWS
                IntegrationHttpMethod: POST
                Uri: !Sub "arn:aws:apigateway:${AWS::Region}:sqs:path/MyQueue-${Environment}"
                Credentials: "arn:aws:iam::541670391863:role/LabRole"
                RequestTemplates:
                    application/json: "Action=SendMessage&MessageBody=$input.body"
                RequestParameters:
                    integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
                PassthroughBehavior: NEVER

    MyDeployment:
        Type: AWS::ApiGateway::Deployment
        DependsOn: MyApiMethod
        Properties:
            RestApiId: !Ref MyApi
            StageName: prod

    MyApiEndpointParameter:
        Type: "AWS::SSM::Parameter"
        Properties:
            Name: "APIGatewayURL"
            Type: "String"
            Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/prod"

    PublicSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Public web access"
            VpcId: !Ref BlogiverVPC
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 3000
                  ToPort: 3000
                  CidrIp: 0.0.0.0/0
                - IpProtocol: "-1"
                  CidrIp: "0.0.0.0/0"

    PrivateSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Private web access"
            VpcId: !Ref BlogiverVPC
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 8003
                  ToPort: 8003
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  SourceSecurityGroupId: !Ref PublicSecurityGroup
            SecurityGroupEgress:
                - IpProtocol: "-1"
                  CidrIp: "0.0.0.0/0"

    FrontendInstance:
        Type: "AWS::EC2::Instance"
        DependsOn: BackendInstance
        Properties:
            ImageId: ami-007855ac798b5175e
            InstanceType: t2.micro
            KeyName: vockey
            SubnetId: !Ref PublicSubnet
            SecurityGroupIds:
                - !Ref PublicSecurityGroup
            IamInstanceProfile: LabInstanceProfile
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    sudo apt update
                    git clone https://github.com/shivam-patel-123/blogiver-client.git
                    git clone https://github.com/shivam-patel-123/blogiver-server.git
                    sudo apt install curl -y
                    sudo apt policy nodejs -y
                    sudo curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
                    sudo apt-get install nodejs -y
                    cd /blogiver-client
                    echo "REACT_APP_BACKEND=http://${BackendInstance.PublicIp}:8003" >> /blogiver-client/.env
                    sudo npm i
                    sudo npm run build
                    sudo apt install nginx -y
                    sudo cp -r /blogiver-client/build/* /var/www/html/
                    sudo systemctl restart nginx
                    cd /blogiver-server
                    sudo npm i
                    sudo npm i -g nodemon
                    nodemon index.js

    BackendInstance:
        Type: "AWS::EC2::Instance"
        Properties:
            ImageId: ami-007855ac798b5175e
            InstanceType: t2.micro
            KeyName: vockey
            SubnetId: !Ref PublicSubnet
            SecurityGroupIds:
                - !Ref PublicSecurityGroup
            IamInstanceProfile: LabInstanceProfile
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    sudo apt update
                    git clone https://github.com/shivam-patel-123/blogiver-server.git
                    sudo apt install curl -y
                    sudo apt policy nodejs -y
                    sudo curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
                    sudo apt-get install nodejs -y
                    sudo apt install npm -y
                    echo "API_GATEWAY_URL=https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/prod/" >> /blogiver-server/.env
                    echo "JWT_TOKEN_EXPIRY=2 days" >> /blogiver-server/.env
                    echo "JWT_TOKEN_EXPIRY_DAYS=2" >> /blogiver-server/.env
                    cd /blogiver-server
                    sudo npm i
                    sudo npm i -g nodemon
                    nodemon index.js
